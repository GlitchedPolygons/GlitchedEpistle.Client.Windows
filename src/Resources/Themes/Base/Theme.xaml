<!--
    Glitched Epistle - Windows Client
    Copyright (C) 2019 Raphael Beck

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Label -->
    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- TextBlock -->
    <Style x:Key="TextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- TextBox -->
    <Style TargetType="TextBox">
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CaretBrush" Value="{DynamicResource InputFieldCaretColor}" />
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
        <Setter Property="Template" Value="{DynamicResource DefaultTextBoxTemplate}" />
    </Style>

    <!-- PasswordBox -->
    <Style TargetType="PasswordBox">
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CaretBrush" Value="{DynamicResource InputFieldCaretColor}" />
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
        <Setter Property="Template" Value="{DynamicResource DefaultPasswordBoxTemplate}" />
    </Style>

    <!-- CheckBox -->
    <Style TargetType="CheckBox">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- RadioButton -->
    <Style TargetType="RadioButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- GridSplitter -->
    <Style TargetType="GridSplitter">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource GridSplitterColor}" />
    </Style>

    <!-- Message View Text (label) -->
    <Style x:Key="MessageLabelTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- Image Attachment Preview -->
    <Style x:Key="ImageAttachmentStyle" TargetType="Image">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Opacity" Value="0.75" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Expandable/collapsible group -->
    <Style x:Key="Expander" TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- Date Picker -->
    <Style TargetType="DatePicker">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource InputFieldForegroundColor}" />
    </Style>

    <!-- Date Picker TextBox -->
    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Height" Value="32"/>
        <Setter Property="Padding" Value="5,3,5,2" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CaretBrush" Value="{DynamicResource InputFieldCaretColor}" />
        <Setter Property="Template" Value="{DynamicResource DefaultDatePickerTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource InputFieldBackgroundColorDisabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Convos ListBox -->
    <Style x:Key="ConvosListBox" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Convos List Entry (Button) -->
    <Style x:Key="ConvoListBoxEntryButton"
           TargetType="Button"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="35" />
        <Setter Property="Width" Value="2000" />
        <Setter Property="Margin" Value="8,0,0,0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="0">
                        <ContentPresenter HorizontalAlignment="Left"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Messages ListBox -->
    <Style x:Key="MessagesListBox" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ScrollBar -->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource ScrollBarThumbColor}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="4"
                          Margin="0,0,4,0"
                          HorizontalAlignment="Right">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track"
                               Grid.Row="0"
                               IsDirectionReversed="true"
                               Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                       Background="{TemplateBinding Foreground}"
                                       Style="{DynamicResource ScrollBarTrackThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand"
                                              Opacity="0"
                                              Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand"
                                              Opacity="0"
                                              Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb"
                                 Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource ButtonSelectBrush}"
                                    TargetName="Thumb" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ScrollBarThumbOnHoverColor}" />
                        </Trigger>
                        <Trigger SourceName="Thumb"
                                 Property="IsDragging"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{DynamicResource DarkBrush}"
                                    TargetName="Thumb" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource ScrollBarThumbOnDragColor}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Thumb"
                                    Property="Opacity"
                                    Value="0.333" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                 Value="Horizontal">
                            <Setter TargetName="GridRoot"
                                    Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track"
                                    Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width"
                                    Value="Auto" />
                            <Setter Property="Height"
                                    Value="8" />
                            <Setter Property="Tag"
                                    Value="Horizontal"
                                    TargetName="Thumb" />
                            <Setter Property="Command"
                                    Value="ScrollBar.PageLeftCommand"
                                    TargetName="PageDown" />
                            <Setter Property="Command"
                                    Value="ScrollBar.PageRightCommand"
                                    TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBar Thumb -->
    <Style x:Key="ScrollBarTrackThumb"
           TargetType="{x:Type Thumb}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Width="Auto"
                                   Height="Auto"
                                   Fill="Transparent" />
                        <Border x:Name="CornerScrollBarRectangle"
                                CornerRadius="0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Width="Auto"
                                Height="Auto"
                                Margin="0"
                                Padding="0"
                                Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag"
                                 Value="Horizontal">
                            <Setter Property="Width"
                                    Value="Auto"
                                    TargetName="CornerScrollBarRectangle" />
                            <Setter Property="Height"
                                    Value="6"
                                    TargetName="CornerScrollBarRectangle" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default Button -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="16,6" />
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Border.CornerRadius" Value="16"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template" Value="{DynamicResource DefaultButtonTemplate}" />
    </Style>

    <!-- Reset Button -->
    <Style x:Key="ResetMainWindowButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource ResetIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource ResetIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Clipboard Button -->
    <Style x:Key="CopyToClipboardButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource ClipboardIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource ClipboardIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Scroll to bottom Button -->
    <Style x:Key="ScrollToBottomButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource ScrollToBottomIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource ScrollToBottomIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Settings Button -->
    <Style x:Key="SettingsButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource SettingsIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource SettingsIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Create Convo Button -->
    <Style x:Key="CreateConvoButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource PlusIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource PlusIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Join Convo Button -->
    <Style x:Key="JoinConvoButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource JoinConvoIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource JoinConvoIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Change Pw Button -->
    <Style x:Key="ChangePasswordButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource ChangePasswordIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource ChangePasswordIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Logout Button -->
    <Style x:Key="LogoutButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource LogoutIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource LogoutIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Trash Button -->
    <Style x:Key="TrashButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource TrashIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource TrashIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Play Audio Button -->
    <Style x:Key="PlayAudioButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource PlayAudioIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource PlayAudioIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Pause Audio Button -->
    <Style x:Key="PauseAudioButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource PauseAudioIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource PauseAudioIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Help Button -->
    <Style x:Key="HelpButton"
           TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource HelpIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="True"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="True">
                            <Setter Property="Opacity"
                                    Value="1.0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource HelpIconSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>